version: '3.8'

services:
  # PostgreSQL Database for Production
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=${DB_NAME:-buildhub}
      - POSTGRES_USER=${DB_USER:-buildhub_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-buildhub_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-buildhub_user} -d ${DB_NAME:-buildhub}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Django Backend for Production
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    command: sh -c "python manage.py migrate && python manage.py collectstatic --noinput && gunicorn buildhub_backend.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - backend_static:/app/staticfiles
      - backend_media:/app/media
    ports:
      - "8000:8000"
    environment:
      - DEBUG=${DEBUG:-False}
      - USE_SQLITE=False
      - DB_NAME=${DB_NAME:-buildhub}
      - DB_USER=${DB_USER:-buildhub_user}
      - DB_PASSWORD=${DB_PASSWORD:-buildhub_password}
      - DB_HOST=postgres
      - DB_PORT=5432
      - SECRET_KEY=${SECRET_KEY:-your-production-secret-key}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # React Frontend for Production
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000/api}
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: unless-stopped

  # Nginx for Production (Optional - for serving static files and load balancing)
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - backend_static:/var/www/static
      - backend_media:/var/www/media
    ports:
      - "443:443"
      - "80:80"
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

volumes:
  postgres_data:
  backend_static:
  backend_media: 